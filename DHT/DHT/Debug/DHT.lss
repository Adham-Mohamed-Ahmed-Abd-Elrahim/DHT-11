
DHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000036a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa7  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008db  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b3  00000000  00000000  00001d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046b  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c9  00000000  00000000  00002a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  7a:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <dht_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	89 e6       	ldi	r24, 0x69	; 105
  86:	98 e1       	ldi	r25, 0x18	; 24
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <dht_ini+0x6>
  90:	00 c0       	rjmp	.+0      	; 0x92 <dht_ini+0x10>
  92:	00 00       	nop
}  DHT_DATA;
void dht_ini()
{//To make sure of reaching stable state.
	_delay_ms(1000);
	//make pin as output
	SET_BIT(dht_pin,dht_addr);
  94:	8c 9a       	sbi	0x11, 4	; 17
	//low output to let dht detect the signal (atleast 18ms)
	CLR_BIT(dht_pin,dht_port);
  96:	94 98       	cbi	0x12, 4	; 18
  98:	8f e3       	ldi	r24, 0x3F	; 63
  9a:	9c e9       	ldi	r25, 0x9C	; 156
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <dht_ini+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <dht_ini+0x20>
  a2:	00 00       	nop
	_delay_ms(20);
	//optional :
	//SET_BIT(dht_pin,dht_port);
	//********************************************************************
	//Release the line to recieve resopnse  (make it as input ) for [20-40 us]
	CLR_BIT(dht_pin,dht_addr);
  a4:	8c 98       	cbi	0x11, 4	; 17
	while(READ_BIT(dht_pin,dht_read));
  a6:	84 99       	sbic	0x10, 4	; 16
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <dht_ini+0x24>
	while(READ_BIT(dht_pin,dht_read)==0);
  aa:	84 9b       	sbis	0x10, 4	; 16
  ac:	fe cf       	rjmp	.-4      	; 0xaa <dht_ini+0x28>
	while(READ_BIT(dht_pin,dht_read));
  ae:	84 99       	sbic	0x10, 4	; 16
  b0:	fe cf       	rjmp	.-4      	; 0xae <dht_ini+0x2c>
}
  b2:	08 95       	ret

000000b4 <dht_read_byte>:
uint8_t dht_read_byte()
{uint8_t data=0;
	//recieve mode 
	CLR_BIT(dht_pin,dht_addr);
  b4:	8c 98       	cbi	0x11, 4	; 17
  b6:	28 e0       	ldi	r18, 0x08	; 8
	while(READ_BIT(dht_pin,dht_read));
	while(READ_BIT(dht_pin,dht_read)==0);
	while(READ_BIT(dht_pin,dht_read));
}
uint8_t dht_read_byte()
{uint8_t data=0;
  b8:	80 e0       	ldi	r24, 0x00	; 0
	//recieve mode 
	CLR_BIT(dht_pin,dht_addr);
	//receiving
	for(uint8_t i=0;i<8;i++)
	{while(READ_BIT(dht_pin,dht_read)==0);	
  ba:	84 9b       	sbis	0x10, 4	; 16
  bc:	fe cf       	rjmp	.-4      	; 0xba <dht_read_byte+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	98 e4       	ldi	r25, 0x48	; 72
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <dht_read_byte+0xc>
	_delay_us(27);
	data=(data<<1)|((READ_BIT(dht_pin,dht_read)!=0) ? 1:0);
  c4:	90 b3       	in	r25, 0x10	; 16
  c6:	92 95       	swap	r25
  c8:	91 70       	andi	r25, 0x01	; 1
  ca:	88 0f       	add	r24, r24
  cc:	89 2b       	or	r24, r25
	while(READ_BIT(dht_pin,dht_read));
  ce:	84 99       	sbic	0x10, 4	; 16
  d0:	fe cf       	rjmp	.-4      	; 0xce <dht_read_byte+0x1a>
  d2:	21 50       	subi	r18, 0x01	; 1
uint8_t dht_read_byte()
{uint8_t data=0;
	//recieve mode 
	CLR_BIT(dht_pin,dht_addr);
	//receiving
	for(uint8_t i=0;i<8;i++)
  d4:	91 f7       	brne	.-28     	; 0xba <dht_read_byte+0x6>
	_delay_us(27);
	data=(data<<1)|((READ_BIT(dht_pin,dht_read)!=0) ? 1:0);
	while(READ_BIT(dht_pin,dht_read));
	}
	return data;
	}
  d6:	08 95       	ret

000000d8 <view_data>:
void view_data ()
{dht_ini();
  d8:	9f 92       	push	r9
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	64 97       	sbiw	r28, 0x14	; 20
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	0e 94 41 00 	call	0x82	; 0x82 <dht_ini>
char temp_int[5];
char temp_float[5];
char humidity_int[5];
char humidity_float[5];
DHT_DATA Read={dht_read_byte(),dht_read_byte(),dht_read_byte(),dht_read_byte(),dht_read_byte()};
 102:	0e 94 5a 00 	call	0xb4	; 0xb4 <dht_read_byte>
 106:	c8 2e       	mov	r12, r24
 108:	0e 94 5a 00 	call	0xb4	; 0xb4 <dht_read_byte>
 10c:	d8 2e       	mov	r13, r24
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <dht_read_byte>
 112:	e8 2e       	mov	r14, r24
 114:	0e 94 5a 00 	call	0xb4	; 0xb4 <dht_read_byte>
 118:	08 2f       	mov	r16, r24
 11a:	0e 94 5a 00 	call	0xb4	; 0xb4 <dht_read_byte>
 11e:	98 2e       	mov	r9, r24
	itoa(Read.temp_low,temp_int,10);
 120:	f1 2c       	mov	r15, r1
 122:	4a e0       	ldi	r20, 0x0A	; 10
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	be 01       	movw	r22, r28
 128:	6f 5f       	subi	r22, 0xFF	; 255
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
 12c:	c7 01       	movw	r24, r14
 12e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
	itoa(Read.temp_high,temp_float,10);
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	be 01       	movw	r22, r28
 13a:	6a 5f       	subi	r22, 0xFA	; 250
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
	itoa(Read.humidity_low,humidity_int,10);
 144:	ac 2c       	mov	r10, r12
 146:	b1 2c       	mov	r11, r1
 148:	4a e0       	ldi	r20, 0x0A	; 10
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	be 01       	movw	r22, r28
 14e:	65 5f       	subi	r22, 0xF5	; 245
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	c5 01       	movw	r24, r10
 154:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
	itoa(Read.humidity_high,humidity_float,10);
 158:	cd 2c       	mov	r12, r13
 15a:	d1 2c       	mov	r13, r1
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	be 01       	movw	r22, r28
 162:	60 5f       	subi	r22, 0xF0	; 240
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	c6 01       	movw	r24, r12
 168:	0e 94 73 01 	call	0x2e6	; 0x2e6 <itoa>
	if(Read.check==Read.humidity_low+Read.humidity_high+Read.temp_low+Read.temp_high)
 16c:	89 2d       	mov	r24, r9
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ca 0c       	add	r12, r10
 172:	db 1c       	adc	r13, r11
 174:	ec 0c       	add	r14, r12
 176:	fd 1c       	adc	r15, r13
 178:	0e 0d       	add	r16, r14
 17a:	1f 1d       	adc	r17, r15
 17c:	80 17       	cp	r24, r16
 17e:	91 07       	cpc	r25, r17
 180:	69 f5       	brne	.+90     	; 0x1dc <view_data+0x104>
	{   lcd_clear();
 182:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_clear>
		//Viewing Temperature
		lcd_send_string("Temp: ");
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_string(temp_int);
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_data('.');
 196:	8e e2       	ldi	r24, 0x2E	; 46
 198:	0e 94 33 01 	call	0x266	; 0x266 <lcd_send_data>
		lcd_send_string(temp_float);
 19c:	ce 01       	movw	r24, r28
 19e:	06 96       	adiw	r24, 0x06	; 6
 1a0:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_data(0xDF);
 1a4:	8f ed       	ldi	r24, 0xDF	; 223
 1a6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_send_data>
		lcd_send_string("C");
 1aa:	87 e6       	ldi	r24, 0x67	; 103
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		//viewing humidity
		lcd_send_command(C_SECOND_LINE);
 1b2:	80 ec       	ldi	r24, 0xC0	; 192
 1b4:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
		lcd_send_string("humid: ");
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_string(humidity_int);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0b 96       	adiw	r24, 0x0b	; 11
 1c4:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_data('.');
 1c8:	8e e2       	ldi	r24, 0x2E	; 46
 1ca:	0e 94 33 01 	call	0x266	; 0x266 <lcd_send_data>
		lcd_send_string(humidity_float);
 1ce:	ce 01       	movw	r24, r28
 1d0:	40 96       	adiw	r24, 0x10	; 16
 1d2:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_send_string>
		lcd_send_data('%');
 1d6:	85 e2       	ldi	r24, 0x25	; 37
 1d8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_send_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <view_data+0x108>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <view_data+0x10e>
 1e6:	00 00       	nop
	}
	_delay_ms(10);
	
	
	
 1e8:	64 96       	adiw	r28, 0x14	; 20
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	bf 90       	pop	r11
 206:	af 90       	pop	r10
 208:	9f 90       	pop	r9
 20a:	08 95       	ret

0000020c <hardware_ini>:
 * Created: 23/10/2020 01:21:52
 *  Author: ADHM
 */ 
#include "micro.h"
void hardware_ini()
{ USED_PORT=0xff;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	8a bb       	out	0x1a, r24	; 26
	DDRD|=0xE0;
 210:	81 b3       	in	r24, 0x11	; 17
 212:	80 6e       	ori	r24, 0xE0	; 224
 214:	81 bb       	out	0x11, r24	; 17
 216:	08 95       	ret

00000218 <lcd_send_command>:
lcd_send_command(DISPLY_ON_CURSOR_ON);
lcd_send_command(CLEAR);
lcd_send_command(HOME);
}
  void lcd_send_command(unsigned char command)
{	LCD_PORT=command;
 218:	8b bb       	out	0x1b, r24	; 27
	//TO send commands 
	CLR_BIT(R_S,PORTD);
 21a:	95 98       	cbi	0x12, 5	; 18
	//To write to LCD
	CLR_BIT(R_W,PORTD);
 21c:	96 98       	cbi	0x12, 6	; 18
	SET_BIT(ENBLE,PORTD);
 21e:	97 9a       	sbi	0x12, 7	; 18
 220:	8f ec       	ldi	r24, 0xCF	; 207
 222:	97 e0       	ldi	r25, 0x07	; 7
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_send_command+0xc>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_send_command+0x12>
 22a:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(ENBLE,PORTD);
 22c:	97 98       	cbi	0x12, 7	; 18
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_send_command+0x1a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_send_command+0x20>
 238:	00 00       	nop
 23a:	08 95       	ret

0000023c <lcd_ini>:
 *  Author: ADHM
 */ 
#include "LCD.h"
#include <string.h>
void lcd_ini(void)
{hardware_ini();
 23c:	0e 94 06 01 	call	0x20c	; 0x20c <hardware_ini>
 240:	8f e2       	ldi	r24, 0x2F	; 47
 242:	95 e7       	ldi	r25, 0x75	; 117
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <lcd_ini+0x8>
 248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_ini+0xe>
 24a:	00 00       	nop
	_delay_ms(15);
lcd_send_command(MODE);
 24c:	88 e3       	ldi	r24, 0x38	; 56
 24e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
lcd_send_command(DISPLY_ON_CURSOR_ON);
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
lcd_send_command(CLEAR);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
lcd_send_command(HOME);
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
 264:	08 95       	ret

00000266 <lcd_send_data>:
	CLR_BIT(ENBLE,PORTD);
	_delay_ms(2);
}

 void lcd_send_data(unsigned char data)
{LCD_PORT=data;
 266:	8b bb       	out	0x1b, r24	; 27
	//TO send DATA
	SET_BIT(R_S,PORTD);
 268:	95 9a       	sbi	0x12, 5	; 18
	//To write to LCD
	CLR_BIT(R_W,PORTD);
 26a:	96 98       	cbi	0x12, 6	; 18
	
	SET_BIT(ENBLE,PORTD);
 26c:	97 9a       	sbi	0x12, 7	; 18
 26e:	8f ec       	ldi	r24, 0xCF	; 207
 270:	97 e0       	ldi	r25, 0x07	; 7
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_send_data+0xc>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_send_data+0x12>
 278:	00 00       	nop
	_delay_ms(1);
	CLR_BIT(ENBLE,PORTD);
 27a:	97 98       	cbi	0x12, 7	; 18
 27c:	8f e9       	ldi	r24, 0x9F	; 159
 27e:	9f e0       	ldi	r25, 0x0F	; 15
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_send_data+0x1a>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_send_data+0x20>
 286:	00 00       	nop
 288:	08 95       	ret

0000028a <lcd_send_string>:
	_delay_ms(2);
}
void lcd_send_string(const char * word)
{
 28a:	ef 92       	push	r14
 28c:	ff 92       	push	r15
 28e:	0f 93       	push	r16
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	8c 01       	movw	r16, r24
 298:	7c 01       	movw	r14, r24
	for (uint16_t i=0;i<strlen(word);i++)
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	06 c0       	rjmp	.+12     	; 0x2ac <lcd_send_string+0x22>
	{
		lcd_send_data(word[i]);
 2a0:	f7 01       	movw	r30, r14
 2a2:	81 91       	ld	r24, Z+
 2a4:	7f 01       	movw	r14, r30
 2a6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_send_data>
	CLR_BIT(ENBLE,PORTD);
	_delay_ms(2);
}
void lcd_send_string(const char * word)
{
	for (uint16_t i=0;i<strlen(word);i++)
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	f8 01       	movw	r30, r16
 2ae:	01 90       	ld	r0, Z+
 2b0:	00 20       	and	r0, r0
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <lcd_send_string+0x24>
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	e0 1b       	sub	r30, r16
 2b8:	f1 0b       	sbc	r31, r17
 2ba:	ce 17       	cp	r28, r30
 2bc:	df 07       	cpc	r29, r31
 2be:	80 f3       	brcs	.-32     	; 0x2a0 <lcd_send_string+0x16>
	{
		lcd_send_data(word[i]);
	}
	
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	08 95       	ret

000002ce <lcd_clear>:
void lcd_clear()
{
	lcd_send_command(CLEAR);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
	lcd_send_command(HOME);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_send_command>
 2da:	08 95       	ret

000002dc <main>:
#include <avr/delay.h>
#include "DHT.h"

int main(void)
{ 
lcd_ini();
 2dc:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_ini>

    /* Replace with your application code */
    while (1) 
    { view_data();
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <view_data>
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <main+0x4>

000002e6 <itoa>:
 2e6:	45 32       	cpi	r20, 0x25	; 37
 2e8:	51 05       	cpc	r21, r1
 2ea:	20 f4       	brcc	.+8      	; 0x2f4 <itoa+0xe>
 2ec:	42 30       	cpi	r20, 0x02	; 2
 2ee:	10 f0       	brcs	.+4      	; 0x2f4 <itoa+0xe>
 2f0:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__itoa_ncheck>
 2f4:	fb 01       	movw	r30, r22
 2f6:	10 82       	st	Z, r1
 2f8:	cb 01       	movw	r24, r22
 2fa:	08 95       	ret

000002fc <__itoa_ncheck>:
 2fc:	bb 27       	eor	r27, r27
 2fe:	4a 30       	cpi	r20, 0x0A	; 10
 300:	31 f4       	brne	.+12     	; 0x30e <__itoa_ncheck+0x12>
 302:	99 23       	and	r25, r25
 304:	22 f4       	brpl	.+8      	; 0x30e <__itoa_ncheck+0x12>
 306:	bd e2       	ldi	r27, 0x2D	; 45
 308:	90 95       	com	r25
 30a:	81 95       	neg	r24
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	0c 94 8a 01 	jmp	0x314	; 0x314 <__utoa_common>

00000312 <__utoa_ncheck>:
 312:	bb 27       	eor	r27, r27

00000314 <__utoa_common>:
 314:	fb 01       	movw	r30, r22
 316:	55 27       	eor	r21, r21
 318:	aa 27       	eor	r26, r26
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	a4 17       	cp	r26, r20
 322:	10 f0       	brcs	.+4      	; 0x328 <__utoa_common+0x14>
 324:	a4 1b       	sub	r26, r20
 326:	83 95       	inc	r24
 328:	50 51       	subi	r21, 0x10	; 16
 32a:	b9 f7       	brne	.-18     	; 0x31a <__utoa_common+0x6>
 32c:	a0 5d       	subi	r26, 0xD0	; 208
 32e:	aa 33       	cpi	r26, 0x3A	; 58
 330:	08 f0       	brcs	.+2      	; 0x334 <__utoa_common+0x20>
 332:	a9 5d       	subi	r26, 0xD9	; 217
 334:	a1 93       	st	Z+, r26
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	79 f7       	brne	.-34     	; 0x318 <__utoa_common+0x4>
 33a:	b1 11       	cpse	r27, r1
 33c:	b1 93       	st	Z+, r27
 33e:	11 92       	st	Z+, r1
 340:	cb 01       	movw	r24, r22
 342:	0c 94 a3 01 	jmp	0x346	; 0x346 <strrev>

00000346 <strrev>:
 346:	dc 01       	movw	r26, r24
 348:	fc 01       	movw	r30, r24
 34a:	67 2f       	mov	r22, r23
 34c:	71 91       	ld	r23, Z+
 34e:	77 23       	and	r23, r23
 350:	e1 f7       	brne	.-8      	; 0x34a <strrev+0x4>
 352:	32 97       	sbiw	r30, 0x02	; 2
 354:	04 c0       	rjmp	.+8      	; 0x35e <strrev+0x18>
 356:	7c 91       	ld	r23, X
 358:	6d 93       	st	X+, r22
 35a:	70 83       	st	Z, r23
 35c:	62 91       	ld	r22, -Z
 35e:	ae 17       	cp	r26, r30
 360:	bf 07       	cpc	r27, r31
 362:	c8 f3       	brcs	.-14     	; 0x356 <strrev+0x10>
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
